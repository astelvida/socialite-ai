// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// =========================================================
// CONFIGURATION
// =========================================================
// Defines how the Prisma client is generated and where it's output
generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

// Defines the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================================
// ENUMS
// =========================================================
// User subscription tiers
enum Subscription {
  FREE // Basic functionality with limitations
  DEV // Developer tier with additional features
  PRO // Professional tier with all features
}

// Types of triggers that can start a workflow
enum TriggerType {
  DM // Direct message trigger
  COMMENT // Comment on a post trigger
}

// Types of actions in a workflow
enum ActionType {
  HUMAN_INPUT // Requires manual input from user
  AI_GENERATED // Automatically generated by AI
}

// Instagram media types
enum InstagramMediaType {
  POST // Standard Instagram post
  STORY // 24-hour temporary content
  REEL // Short-form video content
  CAROUSEL // Multiple images/videos in one post
}

// Types of third-party integrations supported
enum IntegrationName {
  INSTAGRAM // Instagram social media
  WHATSAPP // WhatsApp messaging
  TIKTOK // TikTok social media
  NOTION // Notion productivity
  GOOGLE_CALENDAR // Google Calendar
  GOOGLE_MAIL // Gmail
  GOOGLE_DRIVE // Google Drive storage
  GOOGLE_SHEETS // Google Sheets
}

// =========================================================
// MODELS
// =========================================================

// User model - Central entity representing application users
// Stores basic user information and subscription details
model User {
  id           String       @id @unique // Unique identifier for the user
  email        String       @unique // Email address used for authentication
  firstName    String? // Optional first name
  lastName     String? // Optional last name
  subscription Subscription @default(FREE) // User's subscription tier, defaults to FREE
  createdAt    DateTime     @default(now()) // When the user account was created

  // Relations
  // One-to-many: A user can have multiple integrations
  integrations Integration[] // All third-party integrations connected to this user

  // One-to-many: A user can create multiple workflows
  workflows Workflow[] // Automation workflows owned by this user

  // One-to-one: A user can have one Instagram profile
  instagramProfile InstagramProfile? // Instagram profile connected to this user

  // Indexes for performance optimization
  @@index([subscription]) // Index on subscription for filtering users by tier
  @@index([email]) // Index on email for authentication queries
}

// =========================================================
// INSTAGRAM DATA MODELS
// =========================================================

// Integration model - Represents a connection to a third-party service
// Stores authentication details and integration status
model Integration {
  id               String            @id @default(cuid()) // Unique identifier
  name             IntegrationName // Type of integration (Instagram, WhatsApp, etc.)
  accountId        String            @unique // External account ID from the integrated service
  scopedId         String            @unique // App-scoped user ID from the integrated serviceÂ§
  userId           String // Foreign key to X
  accessToken      String // OAuth access token for API access
  refreshToken     String? // OAuth refresh token (if available)
  isActive         Boolean           @default(false) // Whether this integration is currently active
  tokenExpiry      DateTime? // When the access token expires
  createdAt        DateTime          @default(now()) // When the integration was created
  // Relations
  // One-to-one: One integration can connect to one Instagram profile
  // instagramProfile InstagramProfile? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  // Many-to-one: Many integrations belong to one user
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade) // User who owns this integration
  // One-to-many: One integration can have multiple Instagram media items
  instagramMedia   InstagramMedia[] // Media items retrieved through this integration
  // One-to-one: One integration can connect to one Instagram profile
  InstagramProfile InstagramProfile?

  // Constraints and indexes
  @@unique([userId, name, accountId]) // Each user can have only one integration per service and account
  @@index([name, isActive]) // Index for filtering by type and active status      
  @@index([userId]) // Index for looking up integrations by user
}

// {
// "id": "29427490890198168",
// "username": "azarielariel",
// "profile_picture_url": "https://scontent.cdninstagram.com/v/t51.2885-19/485126495_1192463855873580_4175872026197596392_n.jpg?stp=dst-jpg_s206x206_tt6&_nc_cat=106&ccb=1-7&_nc_sid=bf7eb4&_nc_ohc=KNSYAb505f0Q7kNvwF_rljL&_nc_oc=Adk-8LYJSdF_XPRvXBJ1pFq0-jVc1gtzj_Samto4U-eo17_4o2pi7TsTv_PXFQyMows&_nc_zt=24&_nc_ht=scontent.cdninstagram.com&edm=AP4hL3IEAAAA&oh=00_AfH1MALtAQg5qFJQwfhtUiFlLOmHcSn9wsBtanOvzLOEMA&oe=68068874",
// "user_id": "17841473331411962",
// "account_type": "MEDIA_CREATOR",
// "name": "Ariel Azariel",
// "follows_count": 38,
// "followers_count": 8,
// "media_count": 6
// }
// InstagramProfile model - Represents an Instagram user account
// Stores user profile data from Instagram
model InstagramProfile {
  id                String             @id @unique // Instagram's user ID
  scopedId          String             @unique // App-scoped user ID from Instagram
  username          String // Instagram handle
  name              String // Full name as displayed on Instagram
  profilePictureUrl String // URL to profile picture
  followsCount      Int? // Number of followers (may be null if unavailable)
  followersCount    Int? // Number of accounts following (may be null if unavailable)
  mediaCount        Int? // Number of posts (may be null if unavailable)
  userId            String             @unique // Foreign key to User
  isPrivate         Boolean            @default(false) // Whether the account is private
  lastUpdated       DateTime           @default(now()) // When profile data was last refreshed
  integrationId     String             @unique // Foreign key to Integration
  // Relations
  // One-to-one: Profile is connected through one integration
  integration       Integration?       @relation(fields: [integrationId], references: [id])
  // One-to-one: One Instagram profile belongs to one user
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  // One-to-many: Profile can have multiple media items
  // media             InstagramMedia[] // Media posts owned by this profile
  // One-to-many: Profile can author multiple comments
  comments          InstagramComment[] // Comments authored by this profile
  // One-to-many: Profile can send multiple messages
  messages          InstagramMessage[] // Messages sent by this profile

  // Constraints  
  @@unique([userId, scopedId]) // Unique constraint on user and Instagram's scoped ID
}

// Workflow model - Represents an automation workflow
// Defines a sequence of actions triggered by specific events
model Workflow {
  id          String   @id @default(cuid()) // Unique identifier
  userId      String // Foreign key to User
  name        String // Name of the workflow
  description String? // Optional description
  isActive    Boolean  @default(true) // Whether this workflow is enabled
  createdAt   DateTime @default(now()) // When the workflow was created
  updatedAt   DateTime @updatedAt // When the workflow was last updated

  // Relations
  // Many-to-one: Workflow belongs to one user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // User who owns this workflow

  // One-to-many: Workflow contains multiple actions
  actions Action[] // Ordered list of actions in this workflow

  // One-to-one: Workflow has one trigger
  trigger Trigger? // Event that initiates this workflow

  // Indexes
  @@index([userId, isActive]) // Index for filtering active workflows by user
}

// Trigger model - Represents an event that starts a workflow
// Defines conditions for when a workflow should execute
model Trigger {
  id         String      @id @default(cuid()) // Unique identifier
  type       TriggerType // Type of trigger (DM, Comment)
  keywords   String[] // Array of keywords that can trigger this workflow
  isActive   Boolean     @default(true) // Whether this trigger is enabled
  createdAt  DateTime    @default(now()) // When the trigger was created
  updatedAt  DateTime    @updatedAt // When the trigger was last updated
  // Relations
  // One-to-one: Trigger belongs to one workflow
  workflowId String      @unique // Foreign key to Workflow (unique enforces one-to-one)
  workflow   Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade) // Associated workflow
}

// Action model - Represents a step in a workflow
// Defines what should happen when a workflow is triggered
model Action {
  id          String     @id @default(cuid()) // Unique identifier
  workflowId  String // Foreign key to Workflow
  type        ActionType // Type of action (Human input, AI generated)
  name        String // Name of this action
  description String? // Optional description
  config      Json? // Flexible configuration for different action types (stored as JSON)
  order       Int // Order of execution in the workflow sequence
  isActive    Boolean    @default(true) // Whether this action is enabled
  createdAt   DateTime   @default(now()) // When the action was created
  updatedAt   DateTime   @updatedAt // When the action was last updated

  // Relations
  // Many-to-one: Action belongs to one workflow
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade) // Associated workflow

  // Constraints and indexes
  @@unique([workflowId, order]) // Each order number must be unique within a workflow
  @@index([type, isActive]) // Index for filtering by type and active status
}

// InstagramMedia model - Represents a post, story, reel, or carousel on Instagram
// Stores content and metadata from Instagram media
model InstagramMedia {
  id            String             @id @default(cuid()) // Unique identifier
  integrationId String // Foreign key to IntegrationÂ§
  instagramId   String // Instagram's media ID
  ownerId       String // Foreign key to InstagramProfile (owner)
  username      String // Instagram handle of the owner
  mediaType     InstagramMediaType // Type of media (post, story, reel, carousel)
  mediaUrl      String? // URL to the media content
  thumbnailUrl  String? // URL to the thumbnail image
  permalink     String? // URL to view on Instagram
  caption       String? // Text caption of the post
  likeCount     Int? // Number of likes
  commentCount  Int? // Number of comments
  timestamp     DateTime? // When the media was posted
  location      Json? // Location data if available (stored as JSON)
  hashtags      String[] // Array of hashtags used
  mentions      String[] // Array of accounts mentioned
  lastUpdated   DateTime           @default(now()) // When media data was last refreshed

  // Relations
  // Many-to-one: Media belongs to one integration
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade) // Integration that fetched this media

  // Many-to-one: Media belongs to one profile owner
  // owner InstagramProfile @relation(fields: [ownerId], references: [id], onDelete: Cascade) // Profile that owns this media

  // One-to-many: Media can have multiple comments
  comments InstagramComment[] // Comments on this media

  // Indexes
  @@index([ownerId]) // Index for finding media by owner
}

// InstagramComment model - Represents a comment on Instagram media
// Stores comment content and metadata
model InstagramComment {
  id              String    @id @default(cuid()) // Unique identifier
  instagramId     String    @unique // Instagram's comment ID
  mediaId         String // Foreign key to InstagramMedia
  authorId        String // Foreign key to InstagramProfile (comment author)
  text            String // Comment text content
  likeCount       Int? // Number of likes on this comment
  timestamp       DateTime? // When the comment was posted
  parentCommentId String? // Foreign key to parent comment (for replies)
  lastUpdated     DateTime  @default(now()) // When comment data was last refreshed

  // Relations
  // Many-to-one: Comment belongs to one media item
  media InstagramMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade) // Media this comment is on

  // Many-to-one: Comment has one author
  author InstagramProfile @relation(fields: [authorId], references: [id], onDelete: Cascade) // Profile that wrote this comment

  // Self-relation for replies:
  // Many-to-one: Comment can have one parent comment
  parentComment InstagramComment? @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull) // Parent comment (null if top-level)

  // One-to-many: Comment can have multiple reply comments
  replies InstagramComment[] @relation("CommentReplies") // Replies to this comment

  // Indexes
  @@index([mediaId]) // Index for finding comments by media
  @@index([authorId]) // Index for finding comments by author
}

// InstagramMessage model - Represents a direct message on Instagram
// Stores message content and metadata
model InstagramMessage {
  id          String    @id @default(cuid()) // Unique identifier
  instagramId String    @unique // Instagram's message ID
  senderId    String // Foreign key to InstagramProfile (message sender)
  text        String // Message text content
  mediaUrl    String? // URL to media if message contains media
  timestamp   DateTime? // When the message was sent
  isRead      Boolean   @default(false) // Whether the message has been read
  lastUpdated DateTime  @default(now()) // When message data was last refreshed

  // Relations
  // Many-to-one: Message has one sender
  sender InstagramProfile @relation(fields: [senderId], references: [id], onDelete: Cascade) // Profile that sent this message

  // Indexes
  @@index([senderId]) // Index for finding messages by sender
}

// =========================================================
// RELATIONSHIPS SUMMARY
// =========================================================
/**
 * Database Schema Relationships:
 * 1. User Relationships:
 * - User (1) -- (0..1) InstagramProfile (One-to-one)
 * - User (1) -- (0..n) Integration (One-to-many)
 * - User (1) -- (0..n) Workflow (One-to-many)
 * 2. Instagram Relationships:
 * - InstagramProfile (1) -- (0..n) InstagramMedia (One-to-many)
 * - InstagramProfile (1) -- (0..n) InstagramComment (One-to-many)
 * - InstagramProfile (1) -- (0..n) InstagramMessage (One-to-many)
 * - InstagramProfile (1) -- (1) User (One-to-one)
 * - InstagramProfile (0..1) -- (0..1) Integration (One-to-one)
 * - InstagramMedia (1) -- (0..n) InstagramComment (One-to-many)
 * - InstagramComment (0..1) -- (0..n) InstagramComment (Parent-Child: One-to-many)
 * 3. Workflow Relationships:
 * - Workflow (1) -- (0..1) Trigger (One-to-one)
 * - Workflow (1) -- (0..n) Action (One-to-many)
 * - Workflow (n) -- (1) User (Many-to-one)
 * 4. Integration Relationships:
 * - Integration (n) -- (1) User (Many-to-one)
 * - Integration (0..1) -- (0..1) InstagramProfile (One-to-one)
 * - Integration (1) -- (0..n) InstagramMedia (One-to-many)
 * Schema Diagram (ASCII):
 * +-------+       +---------------+
 * | User  |-------| InstagramProfile |
 * +-------+       +---------------+
 * |                  |
 * |                  |
 * v                  v
 * +-------+       +---------------+
 * |Workflow|      | InstagramMedia |
 * +-------+       +---------------+
 * |  |                |
 * |  |                |
 * v  v                v
 * +-------+       +---------------+
 * |Action |       |InstagramComment|
 * +-------+       +---------------+
 * |                    |
 * |                    |
 * v                    v
 * +-------+       +---------------+
 * |Trigger|       |InstagramMessage|
 * +-------+       +---------------+
 * |
 * |
 * v
 * +---------------+
 * |  Integration  |
 * +---------------+
 * Note: For clarity, some relationships are simplified in the diagram.
 */
