// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Subscription {
  FREE
  DEV
  PRO
}

// Types of triggers that can start a workflow
enum TriggerType {
  DM // Direct message
  COMMENT // Comment on a post
}

// Types of actions in a workflow
enum ActionType {
  HUMAN_INPUT // Requires manual input
  AI_GENERATED // Generated by AI
}

// Instagram media types
enum InstagramMediaType {
  POST
  STORY
  REEL
  CAROUSEL
}

enum IntegrationType {
  INSTAGRAM
  WHATSAPP
  TIKTOK
  NOTION
  GOOGLE_CALENDAR
  GOOGLE_MAIL
  GOOGLE_DRIVE
  GOOGLE_SHEETS
}

model User {
  id               Int               @id @unique
  email            String            @unique
  firstName        String?
  lastName         String?
  subscription     Subscription      @default(FREE)
  integrations     Integration[]
  workflows        Workflow[]
  createdAt        DateTime          @default(now()) // Relations
  instagramProfile InstagramProfile?
}

// Instagram data models
model InstagramProfile {
  id             String             @id @unique // Instagram user ID
  scopedId       String             @unique // scoped App user ID
  username       String
  fullName       String
  profilePicUrl  String
  bio            String?
  website        String?
  followerCount  Int?
  followingCount Int?
  mediaCount     Int?
  userId         Int                @unique
  integrationId  String             @unique
  isPrivate      Boolean            @default(false)
  lastUpdated    DateTime           @default(now())
  // Relations
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  integration    Integration        @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  media          InstagramMedia[]
  comments       InstagramComment[]
  messages       InstagramMessage[]

  @@unique([integrationId, scopedId])
}

model Integration {
  id           String          @id @default(cuid())
  userId       Int
  type         IntegrationType
  accountId    String
  accessToken  String
  refreshToken String?
  tokenExpiry  DateTime?
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  triggers          Trigger[]
  instagramProfiles InstagramProfile[]
  instagramMedia    InstagramMedia[]

  @@unique([userId, type, accountId])
}

model Trigger {
  id            String      @id @default(cuid())
  integrationId String
  type          TriggerType
  keywords      String[] // Array of keywords that can trigger this
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  integration      Integration       @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  workflowTriggers WorkflowTrigger[]
}

model Workflow {
  id          String   @id @default(cuid())
  userId      Int
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  triggers WorkflowTrigger[]
  actions  Action[]
}

// Join table for workflows and triggers (many-to-many)
model WorkflowTrigger {
  id         String   @id @default(cuid())
  workflowId String
  triggerId  String
  createdAt  DateTime @default(now())

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  trigger  Trigger  @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@unique([workflowId, triggerId])
}

model Action {
  id          String     @id @default(cuid())
  workflowId  String
  type        ActionType
  name        String
  description String?
  config      Json? // Flexible configuration for different action types
  order       Int // Order in the workflow sequence
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, order])
}

model InstagramMedia {
  id            String             @id @default(cuid())
  integrationId String
  instagramId   String             @unique
  ownerId       String
  mediaType     InstagramMediaType
  mediaUrl      String?
  thumbnailUrl  String?
  permalink     String?
  caption       String?
  likeCount     Int?
  commentCount  Int?
  timestamp     DateTime?
  location      Json?
  hashtags      String[]
  mentions      String[]
  lastUpdated   DateTime           @default(now())

  // Relations
  integration Integration        @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  owner       InstagramProfile   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  comments    InstagramComment[]

  @@index([ownerId])
}

model InstagramComment {
  id              String    @id @default(cuid())
  instagramId     String    @unique
  mediaId         String
  authorId        String
  text            String
  likeCount       Int?
  timestamp       DateTime?
  parentCommentId String?
  lastUpdated     DateTime  @default(now())

  // Relations
  media         InstagramMedia     @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  author        InstagramProfile   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment InstagramComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  replies       InstagramComment[] @relation("CommentReplies")

  @@index([mediaId])
  @@index([authorId])
}

model InstagramMessage {
  id          String           @id @default(cuid())
  instagramId String           @unique
  senderId    String
  text        String
  mediaUrl    String?
  timestamp   DateTime?
  isRead      Boolean          @default(false)
  lastUpdated DateTime         @default(now())
  // Relations
  sender      InstagramProfile @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
}
