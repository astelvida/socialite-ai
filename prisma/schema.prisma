generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @unique
  email            String            @unique
  firstName        String?
  lastName         String?
  subscription     Subscription      @default(FREE)
  createdAt        DateTime          @default(now())
  integrations     Integration[]
  workflows        Workflow[]
  instagramProfile InstagramProfile?

  // Indexes for performance optimization
  @@index([subscription])
  @@index([email])
}

model Integration {
  id               String            @id @default(cuid())
  name             IntegrationName
  accountId        String            @unique
  scopedId         String            @unique
  userId           String
  accessToken      String
  refreshToken     String?
  isActive         Boolean           @default(false)
  tokenExpiry      DateTime?
  createdAt        DateTime          @default(now())
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramMedia   InstagramMedia[]
  InstagramProfile InstagramProfile?

  // Constraints and indexes
  @@unique([userId, name, accountId])
  @@index([name, isActive])
  @@index([userId])
}

model InstagramProfile {
  id                String             @id @default(cuid())
  instagramId       String             @unique
  scopedId          String             @unique
  userId            String             @unique
  username          String
  name              String?
  profilePictureUrl String
  followsCount      Int?
  followersCount    Int?
  mediaCount        Int?
  isPrivate         Boolean            @default(false)
  lastUpdated       DateTime           @default(now())
  integrationId     String             @unique
  integration       Integration?       @relation(fields: [integrationId], references: [id])
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramMedia    InstagramMedia[]
  comments          InstagramComment[]
  messages          InstagramMessage[]

  // Constraints  
  @@unique([userId, scopedId])
}

model Workflow {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions     Action[]
  trigger     Trigger?

  // Indexes
  @@index([userId, isActive])
}

model Trigger {
  id         String      @id @default(cuid())
  type       TriggerType
  keywords   String[]
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  workflowId String      @unique
  workflow   Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model Action {
  id          String     @id @default(cuid())
  workflowId  String
  type        ActionType
  name        String
  description String?
  config      Json?
  order       Int
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  workflow    Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // Constraints and indexes
  @@unique([workflowId, order])
  @@index([type, isActive])
}

model InstagramMedia {
  id               String             @id @default(cuid())
  instagramId      String             @unique
  ownerId          String
  integrationId    String
  username         String
  mediaType        String
  mediaUrl         String
  thumbnailUrl     String?
  permalink        String?
  caption          String?
  likeCount        Int?
  commentCount     Int?
  timestamp        DateTime?
  location         Json?
  mentions         String[]
  lastUpdated      DateTime           @default(now())
  integration      Integration        @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  instagramProfile InstagramProfile?  @relation(fields: [ownerId], references: [scopedId], onDelete: Cascade)
  comments         InstagramComment[]

  // Indexes
  @@index([ownerId])
}

model InstagramComment {
  id              String             @id @default(cuid())
  instagramId     String             @unique
  mediaId         String
  authorId        String
  text            String
  likeCount       Int?
  timestamp       DateTime?
  parentCommentId String?
  lastUpdated     DateTime           @default(now())
  media           InstagramMedia     @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  author          InstagramProfile   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment   InstagramComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  replies         InstagramComment[] @relation("CommentReplies")

  // Indexes
  @@index([mediaId])
  @@index([authorId])
}

model InstagramMessage {
  id          String           @id @default(cuid())
  instagramId String           @unique
  senderId    String
  text        String
  mediaUrl    String?
  timestamp   DateTime?
  isRead      Boolean          @default(false)
  lastUpdated DateTime         @default(now())
  sender      InstagramProfile @relation(fields: [senderId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([senderId])
}

enum Subscription {
  FREE
  DEV
  PRO
}

enum TriggerType {
  DM
  COMMENT
}

enum ActionType {
  HUMAN_INPUT
  AI_GENERATED
}

enum InstagramMediaType {
  POST
  STORY
  REEL
  CAROUSEL
}

enum IntegrationName {
  INSTAGRAM
  WHATSAPP
  TIKTOK
  NOTION
  GOOGLE_CALENDAR
  GOOGLE_MAIL
  GOOGLE_DRIVE
  GOOGLE_SHEETS
}

// RELATIONSHIPS SUMMARY
// =========================================================
/**
 * Database Schema Relationships:
 * 1. User Relationships:
 * - User (1) -- (0..1) InstagramProfile (One-to-one)
 * - User (1) -- (0..n) Integration (One-to-many)
 * - User (1) -- (0..n) Workflow (One-to-many)
 * 2. Instagram Relationships:
 * - InstagramProfile (1) -- (0..n) InstagramMedia (One-to-many)
 * - InstagramProfile (1) -- (0..n) InstagramComment (One-to-many)
 * - InstagramProfile (1) -- (0..n) InstagramMessage (One-to-many)
 * - InstagramProfile (1) -- (1) User (One-to-one)
 * - InstagramProfile (0..1) -- (0..1) Integration (One-to-one)
 * - InstagramMedia (1) -- (0..n) InstagramComment (One-to-many)
 * - InstagramComment (0..1) -- (0..n) InstagramComment (Parent-Child: One-to-many)
 * 3. Workflow Relationships:
 * - Workflow (1) -- (0..1) Trigger (One-to-one)
 * - Workflow (1) -- (0..n) Action (One-to-many)
 * - Workflow (n) -- (1) User (Many-to-one)
 * 4. Integration Relationships:
 * - Integration (n) -- (1) User (Many-to-one)
 * - Integration (0..1) -- (0..1) InstagramProfile (One-to-one)
 * - Integration (1) -- (0..n) InstagramMedia (One-to-many)
 * Schema Diagram (ASCII):
 * +-------+       +---------------+
 * | User  |-------| InstagramProfile |
 * +-------+       +---------------+
 * |                  |
 * |                  |
 * v                  v
 * +-------+       +---------------+
 * |Workflow|      | InstagramMedia |
 * +-------+       +---------------+
 * |  |                |
 * |  |                |
 * v  v                v
 * +-------+       +---------------+
 * |Action |       |InstagramComment|
 * +-------+       +---------------+
 * |                    |
 * |                    |
 * v                    v
 * +-------+       +---------------+
 * |Trigger|       |InstagramMessage|
 * +-------+       +---------------+
 * |
 * |
 * v
 * +---------------+
 * |  Integration  |
 * +---------------+
 * Note: For clarity, some relationships are simplified in the diagram.
 */
